//char
Console.WriteLine('b');

//string
Console.WriteLine("Hello World!");

//integer
Console.WriteLine(123);

//decimal
Console.WriteLine(12.3m); 
//Para criar um literal decimal, acrescente a letra m após o número. Nesse contexto, o m é chamado de sufixo literal. 
//O sufixo literal informa ao compilador que você deseja trabalhar com um valor do tipo decimal.

var message = "Hello world!";
//Uma variável local de tipo implícito é criada usando a palavra-chave var, que instrui o compilador de C# a inferir o tipo.
//Quando o tipo é inferido, é como se o tipo de dados real tivesse sido usado para declarar a variável.

//Formatação de strings
// \n pula linha \t tab \u unicode @ texto literal

Console.WriteLine("Hello \"World\"!");
Console.WriteLine("c:\\sourse\\repos");
Console.Write("\n");
Console.WriteLine("Generating invoices for customer \"ABC Corp\" ...");
Console.WriteLine("Invoice: 1021\t\tComplete!");
Console.WriteLine("Invoice: 1022\t\tComplete!");
Console.WriteLine("\nOutput Directory:\t");
Console.WriteLine(@"c:\invoices");
Console.WriteLine("");
Console.WriteLine(@"     c:\source\repos
             (this is where your code goes)");
Console.WriteLine();
// Kon'nichiwa World
Console.WriteLine("\u3053\u3093\u306B\u3061\u306F World!");
//To generate Japanese invoices:
//Nihon no seikyu-sho o seisei suru ni wa:
Console.Write("\n\n\u65e5\u672c\u306e\u8acb\u6c42\u66f8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\uff1a\n\t");
Console.WriteLine(@"c:\invoices\app.exe -j");

string firstName = "Bob";
string greeting ="Hello";
Console.WriteLine(greeting + " " + firstName + "!");
string message = $"{greeting} {firstName}!";
Console.WriteLine(message);

string firstName = "Bob";
string greeting = "Hello";
Console.WriteLine($"{greeting} {firstName}!");

string projectName= "First-Project";
Console.WriteLine($@"C:\Output\{projectName}\Data");

string projectName = "ACME";
string russianMessage = "\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0432\u044b\u0432\u043e\u0434";

Console.WriteLine($@"View English output:
        c:\Exercise\{projectName}\data.txt");

Console.WriteLine("\n" + russianMessage + ":\n\t\tc:\\Exercise\\" + projectName + "\\ru-RU\\data.txt");

int firstNumber = 12;
int secondNumber = 7;
Console.WriteLine(firstNumber + secondNumber);

string firstName = "Bob";
int widgetsSold = 7;
Console.WriteLine(firstName + " sold " + widgetsSold + 7 + " widgets.");
Console.WriteLine(firstName + " sold " + (widgetsSold + 7) + " widgets.");

//operadores matemáticos

int sum = 7+5;
int difference = 7-5;
int product = 7*5;
int quotient = 7/5;
decimal decimalQuotient = 7.0m / 5;

Console.WriteLine("Sum " + sum);
Console.WriteLine("Difference: " + difference);
Console.WriteLine("Product: " + product);
Console.WriteLine("Quotient: " + quotient);
Console.WriteLine("Decimal quotient: " + decimalQuotient);

int first = 7;
int second = 5;
decimal quotient = (decimal)first / (decimal)second;
Console.WriteLine(quotient);

Console.WriteLine("Modulus of 200 / 5 : " + (200 % 5));
Console.WriteLine("Modulus of 7 / 5 : " + (7 % 5));

//incrementos

int value = 1;

value = value + 1;
Console.WriteLine("First increment: " + value);

value += 1;
Console.WriteLine("Second increment: " + value);

value++;
Console.WriteLine("Third increment: " + value);

value = value -1;
Console.WriteLine("First decrement: " + value);

value -= 1;
Console.WriteLine("Second decrement: " + value);

value--;
Console.WriteLine("Third decrement: " + value);

int value = 1;
value++;
Console.WriteLine("First: " + value);
Console.WriteLine("Second: " + value++);
Console.WriteLine("Third: " + value);
Console.WriteLine("Fourth: " + (++value));

int fahrenheit = 94;
decimal celsius = (fahrenheit - 32)*(5.0m / 9.0m);
Console.WriteLine(celsius); 




//Metodos


//metodo com estado (instancia)
Random dice = new Random();
int roll = dice.Next(1,7);
Console.WriteLine(roll);


//if-else

Random dice = new Random();

int roll1 = dice.Next(1,7);
int roll2 = dice.Next(1,7);
int roll3 = dice.Next(1,7);

int total = roll1 + roll2 + roll3;

Console.WriteLine($"Dice roll: {roll1}+{roll2}+{roll3}={total}");

if((roll1 == roll2) || (roll2 == roll3) || (roll1 == roll3))
{
    if((roll1 == roll2) && (roll2 == roll3))
    {
        Console.WriteLine("Triple! +6");
        total+=6;
    }
    else
    {
        Console.WriteLine("Double! +2");
        total+=2;
    }   
}

if(total >= 16)
{
    Console.WriteLine("Car");
}
else if(total >=10)
{
    Console.WriteLine("Laptop");
}
else if(total ==7)
{
    Console.WriteLine("Trip");
}
else
{
    Console.WriteLine("Cat (=");
}


//Matriz

/*string[] fraudulentOderIDs = new string[3];

fraudulentOderIDs[0] = "A123";
fraudulentOderIDs[1] = "B456";
fraudulentOderIDs[2] = "C789";*/

string[] fraudulentOderIDs = {"A123", "B456", "C789"};

Console.WriteLine($"First: {fraudulentOderIDs[0]}");
Console.WriteLine($"Second: {fraudulentOderIDs[1]}");
Console.WriteLine($"Third: {fraudulentOderIDs[2]}");

fraudulentOderIDs[0] = "F000";

Console.WriteLine($"Reassign First: {fraudulentOderIDs[0]}");
Console.WriteLine($"There are {fraudulentOderIDs.Length} fraudulent orders to process.");


//foreach

string[] names = {"Bob", "Conrad", "Grant"};
foreach (string name in names)
{
    Console.WriteLine(name);
}

int[] inventory = {200, 450, 700, 175, 250};
int sum = 0;
int bin = 0;
foreach (int items in inventory)
{
    sum+= items;
    bin++;
    Console.WriteLine($"Bin {bin} = {items} items (Running Tally: {sum})");
}

Console.WriteLine($"We have {sum} items in inventory.");

/*string value1 = " a";
string value2 = "A ";
Console.WriteLine(value1.Trim().ToLower() == value2.Trim().ToLower());*/

/*Console.WriteLine("a" != "a");
Console.WriteLine("a" != "A");
Console.WriteLine(1 != 2);

string value = "a";
Console.WriteLine(value != "a");*/

/*Console.WriteLine(1>2);
Console.WriteLine(1<2);
Console.WriteLine(1>=1);
Console.WriteLine(1<=1);*/

/*string pangram = "The quick brown fox jumps over the lazy dog.";
Console.WriteLine(!pangram.Contains("fox"));
Console.WriteLine(!pangram.Contains("cow"));

Console.WriteLine(pangram.Contains("fox") == false);
Console.WriteLine(!pangram.Contains("fox"));*/

/*int saleAmount = 1001;
int discount = saleAmount > 1000 ? 100 : 50;
Console.WriteLine($"Discount: {discount}");*/

/*int saleAmount = 1001;
Console.WriteLine($"Discount: {(saleAmount > 1000 ? 100:50)}");*/

/*Random coin = new Random();
int roll = coin.Next(0,2);
Console.WriteLine((roll == 1) ? "heads" : "tails");*/

string permission = "Admin|Manager";
int level = 53;

if (permission.Contains("Admin"))
{
    if (level > 55)
    {
        Console.WriteLine("Welcome, Super Admin user.");
    }
    else
    {
        Console.WriteLine("Welcome, Admin user.");
    }
}
else if (permission.Contains("Manager"))
{
    if (level >= 20)
    {
        Console.WriteLine("Contact an Admin for access.");
    }
    else
    {
        Console.WriteLine("You do not have sufficient privileges.");
    }
}
else
{
    Console.WriteLine("You do not have sufficient privileges.");
}


//switch-case

int employeeLevel = 100;
string employeeName = "John Smith";

string title = "";

switch (employeeLevel)
{
    case 100:
    case 200:
        title = "Senior Associate";
        break;
    case 300:
        title = "Manager";
        break;
    case 400:
        title = "Senior Manager"
        ;
        break;
    default:
        title = "Associate";
        break;
}

Console.WriteLine($"{employeeName}, {title}");

/////////////////////////////////////////////////////////////

string sku = "01-MN-L";

string[] product = sku.Split('-');

string type ="";
string color = "";
string size = "";

switch(product[0])
{
    case "01":
        type = "Sweat shirt";
        break;
    case "02":
        type = "T-Shirt";
        break;
    case "03":
        type = "Sweat pants";
        break;
    default:
        type = "Other";
        break;
}

switch(product[1])
{
    case "BL":
        color = "Black";
        break;
    case "MN":
        color = "Maroon";
        break;
    default:
        color = "White";
        break;
}

switch(product[2])
{
    case "S":
        size = "Small";
        break;
    case "M":
        size = "Medium";
        break;
    case "L":
        size = "Large";
        break;
    default:
        size = "One Size Fits All";
        break;
}

Console.WriteLine($"Product: {size} {color} {type}");


////////////////////////////
//FOR FIZZ BUZZ

for(int i=1;i<=100;i++)
{
    if(i%3==0 && i%5==0)
        Console.WriteLine($"{i} FizzBuzz");
    else if(i%3==0)
        Console.WriteLine($"{i} Fizz");
    else if(i%5==0)
        Console.WriteLine($"{i} Buzz");
    else
        Console.WriteLine(i);
}

//////////////////////////////////
// do while

Random random = new Random();
int current = random.Next(1,11);

/*do
{
    current = random.Next(1,11);
    Console.WriteLine(current);
}
while (current !=7);*/

/*while (current >= 3)
{
    Console.WriteLine(current);
    current = random.Next(1,11);
}
Console.WriteLine($"Last number: {current}");*/

//continue pula para o proximo loop
do
{
    current = random.Next(1,11);
    if(current >= 8) 
        continue;
    Console.WriteLine(current);
}
while (current != 7);



//////////////////////////////////

//SIMPLE RPG

int playerHP = 10;
int enemyHP = 10;

Random dice = new Random();

do
{
    if(enemyHP > 0)
    {
        int attack = dice.Next(1,11);
        enemyHP -= attack;
        //Console.WriteLine($"EnemyHP: {enemyHP}");
        Console.WriteLine($"You attack the Enemy and cause {attack} damage.");
        Console.WriteLine($"EnemyHP: {enemyHP}");
        if(enemyHP <= 0)
        {
            Console.WriteLine("You win!");
            break;
        }
    }
    if(playerHP > 0)
    {
        int attack = dice.Next(1,11);
        playerHP -= attack;
        //Console.WriteLine($"PlayerHP: {playerHP}");
        Console.WriteLine($"The enemy attacks you and cause {attack} damage.");
        Console.WriteLine($"PlayerHP: {playerHP}");
        if(playerHP <= 0)
        {
            Console.WriteLine("You lose!");
            break;
        }
    }
}
while(enemyHP>0 && playerHP>0);

////////////////////////

//Tipos de dados

Console.WriteLine("Signed integral types:");

Console.WriteLine($"sbyte : {sbyte.MinValue} to {sbyte.MaxValue}");
Console.WriteLine($"short : {short.MinValue} to {short.MaxValue}");
Console.WriteLine($"int   : {int.MinValue} to {int.MaxValue}");
Console.WriteLine($"long  : {long.MinValue} to {long.MaxValue}");

Console.WriteLine("");
Console.WriteLine("Unsigned integral types");

Console.WriteLine($"byte    : {byte.MinValue} to {byte.MaxValue}");
Console.WriteLine($"ushort  : {ushort.MinValue} to {ushort.MaxValue}");
Console.WriteLine($"uint    : {uint.MinValue} to {uint.MaxValue}");
Console.WriteLine($"ulong   : {ulong.MinValue} to {ulong.MaxValue}");

Console.WriteLine("");
Console.WriteLine("Floating point types");
Console.WriteLine($"float   : {float.MinValue} to {float.MaxValue}");
Console.WriteLine($"double  : {double.MinValue} to {double.MaxValue}");
Console.WriteLine($"decimal : {decimal.MinusOne} to {decimal.MaxValue}");

/////////////////////////////
//convertendo tipos de dados

/*int first = 5;
int second = 7;
string message = first.ToString() + second.ToString();
Console.WriteLine(message);*/

/*string first = "5";
string second = "7";

//TryParse() é uma versão melhor do Parse()
int sum = int.Parse(first) + int.Parse(second);
Console.WriteLine(sum);*/

/*string value1 = "5";
string value2 = "7";
int result = Convert.ToInt32(value1) * Convert.ToInt32(value2);
Console.WriteLine(result);*/

int value = (int)1.5m; //casting truncates
Console.WriteLine(value);

int value2 = Convert.ToInt32(1.5m); //converting rounds up
Console.WriteLine(value2);


////////////////////////////////////////////////////////

// TryParse

string value = "bad";
int result = 0;
if (int.TryParse(value, out result))
{
    Console.WriteLine($"Measurement: {result}");
}
else
{
    Console.WriteLine("Unable to report measurement.");
}
// Since it is defined outside of the if statement,
// it can be accessed later in your code.
if(result > 0)
    Console.WriteLine($"Measurement (w/ offset): {50 + result}");
    
// TryParse + Foreach

string[] values = { "12.3", "45", "ABC", "11", "DEF"};

string message = "";
decimal soma = 0m;
decimal result = 0m;

foreach(var value in values)
{
    if(decimal.TryParse(value, out result))
        soma += result;
    else
        message += value;
}
Console.WriteLine($"Message: {message}");
Console.WriteLine($"Total: {soma}");


    
////////////////////////
// conversions

int value1 = 12;
decimal value2 = 6.2m;
float value3 = 4.3f;

// Your code here to set result1
int result1 = (int)((decimal)value1 / value2);

Console.WriteLine($"Divide value1 by value2, display the result as an int: {result1}");

// Your code here to set result2

decimal result2 = (value2 / (decimal)value3);
Console.WriteLine($"Divide value2 by value3, display the result as a decimal: {result2}");

// Your code here to set result3

float result3 = value3 / (float)value1;
Console.WriteLine($"Divide value3 by value1, display the result as a float: {result3}");


///////////////////////////////////////
// Reverse and Sort

string[] pallets = { "B14", "A11", "B12", "A13" };

Console.WriteLine("Sorted...");
Array.Sort(pallets);
foreach (var pallet in pallets)
    Console.WriteLine($" -- {pallet}");

Console.WriteLine("");
Console.WriteLine("Reversed...");
Array.Reverse(pallets);
foreach (var pallet in pallets)
    Console.WriteLine($"-- {pallet}");
    
/////////////////////////////////////

// Resize and Clear

string[] pallets = { "B14", "A11", "B12", "A13" };

Console.WriteLine("");

Console.WriteLine($"Before: {pallets[0]}");
Array.Clear(pallets, 0,2);
Console.WriteLine($"Clearing 2 ... count: {pallets.Length}");
foreach (var pallet in pallets)
    Console.WriteLine($"-- {pallet}");
Console.WriteLine($"After: {pallets[0]}");

Console.WriteLine("");
Array.Resize(ref pallets, 6);
Console.WriteLine($"Resizing 6 ... count: {pallets.Length}");

pallets[4] = "C01";
pallets[5] = "C02";

foreach (var pallet in pallets)
    Console.WriteLine($"-- {pallet}");

Console.WriteLine("");
Array.Resize(ref pallets, 3);
Console.WriteLine($"Resizing 3 ... count {pallets.Length}");

foreach (var pallet in pallets)
    Console.WriteLine($"-- {pallet}");
    
    
/////////////////////////

//Split and Join

string value = "abc123";
char[] valueArray = value.ToCharArray();
Array.Reverse(valueArray);
//string result = new string(valueArray);
string result = String.Join(",", valueArray);
Console.WriteLine(result);

string[] items = result.Split(',');
foreach (string item in items)
    Console.Write(item);
    
//////////////////////////////////////
// Manipulando strings

string pangram = "The quick brown fox jumps over the lazy dog";

string[] splitMessage = pangram.Split(' ');
char[] charMessage;
string finalMessage;

foreach (string message in splitMessage)
{
    charMessage = message.ToCharArray();
    Array.Reverse(charMessage);
    finalMessage = String.Join("", charMessage);
    Console.Write($"{finalMessage} ");
}
/*
string pangram = "The quick brown fox jumps over the lazy dog";

string[] message = pangram.Split(' ');
string[] newMessage = new string[message.Length];

for (int i = 0; i < message.Length; i++)
{
    char[] letters = message[i].ToCharArray();
    Array.Reverse(letters);
    newMessage[i] = new string(letters);
}

string result = String.Join(" ", newMessage);
Console.WriteLine(result);*/


string orderStream = "B123,C234,A345,C15,B177,G3003,C235,B179";
string[] organizedOrderStream = orderStream.Split(',');

foreach (var order in organizedOrderStream)
    if(order.ToString().StartsWith("B"))
        Console.WriteLine(order);
        


//////////////////////////////////////////////
// formatando strings

string first = "Hello";
string second = "Vadim";
string third = "Blyat";
string result = string.Format("{0} {1}, {2}!", first, second, third);
Console.WriteLine(result);
Console.WriteLine("{1} {1} {0}", second, third);

decimal price = 123.45m;
int discount = 50;
Console.WriteLine($"Price: {price:C} (Save {discount:C}"); //moeda local

decimal measurement = 123456.78912m;
Console.WriteLine($"Measurement: {measurement:N}"); //duas casas
Console.WriteLine($"Measurement: {measurement:N4}"); //quatro casas

decimal tax = .36785m;
Console.WriteLine($"Tax rate: {tax:P2}"); //percent

int invoiceNumber = 1201;
decimal productMeasurement = 25.4568m;
decimal subtotal = 2759.00m;
decimal taxPercentage = .15825m;
decimal total = 3185.19m;

Console.WriteLine($"Invoice Number: {invoiceNumber}");
Console.WriteLine($"    Measurement: {productMeasurement:N3} mg");
Console.WriteLine($"    Sub Total: {subtotal:C}");
Console.WriteLine($"        Tax: {taxPercentage:P2}");
Console.WriteLine($"    Total Due: {total:C}");

////////////////////////////////////////////////
// metodos de formatação string

Veja uma breve lista de categorias desses métodos internos para você poder ter uma ideia do que é possível.

    Métodos que adicionam espaços em branco para fins de formatação (PadLeft(), PadRight())

    Métodos que comparam duas cadeias de caracteres ou facilitam a comparação (Trim(), TrimStart(), TrimEnd(), GetHashcode(), a propriedade Length)

    Métodos que ajudam a determinar o que há dentro de uma cadeia de caracteres ou até mesmo recuperar apenas uma parte da cadeia de caracteres (Contains(), StartsWith(), EndsWith(), Substring())

    Métodos que alteram o conteúdo da cadeia de caracteres substituindo, inserindo ou removendo partes (Replace(), Insert(), Remove())

    Métodos que transformam uma cadeia de caracteres em uma matriz de cadeias de caracteres ou de caracteres (Split(), ToCharArray())

string input = "Pad This";
Console.WriteLine(input);
Console.WriteLine(input.PadLeft(12));
Console.WriteLine(input.PadRight(12));
Console.WriteLine(input.PadRight(12,'-'));

string paymentId = "769";
string payeeName = "Mr. Stephen Ortega";
string paymentAmount = "$5,000.00";

var formattedLine = paymentId.PadRight(6);
formattedLine += payeeName.PadRight(24);
formattedLine += paymentAmount.PadLeft(10);
Console.WriteLine("123456789 123456789 123456789 1234567890");
Console.WriteLine(formattedLine);

string customerName = "Mr. Jones";

string currentProduct = "Magic Yield";
int currentShares = 2975000;
decimal currentReturn = 0.1275m;
decimal currentProfit = 55000000.0m;

string newProduct = "Glorious Future";
decimal newReturn = 0.13125m;
decimal newProfit = 63000000.0m;

Console.WriteLine($"Dear {customerName},");
Console.WriteLine($"As a customer of our {currentProduct} offering we are excited to tell you about a new financial product that would dramatically increase your return.");
Console.WriteLine("");
Console.WriteLine($"Currently, you own {currentShares:N} shares at a return of {currentReturn:P2}.");
Console.WriteLine("");
Console.WriteLine($"Our new product, {newProduct} offers a return of {newReturn:P2}.  Given your current volume, your potential profit would be {newProfit:C}.");
Console.WriteLine("");
Console.WriteLine("Here's a quick comparison:\n");

string comparrisonMessage = "";

comparrisonMessage += currentProduct.PadRight(20);
comparrisonMessage += String.Format($"{currentReturn:P2}").PadRight(10);
comparrisonMessage += String.Format($"{currentProfit:C}\n");
comparrisonMessage += newProduct.PadRight(20);
comparrisonMessage += String.Format($"{newReturn:P}").PadRight(10);
comparrisonMessage += String.Format("{0:C}",newProfit).PadRight(20);

Console.WriteLine(comparrisonMessage);


//////////////////////////////////
// ????

/*string message = "Find what is (inside the parentheses)";

int openingPosition = message.IndexOf('(');
int closingPosition = message.IndexOf(')');


openingPosition += 1;

int length = closingPosition - openingPosition;
Console.WriteLine(message.Substring(openingPosition, length));*/

/*string message = "What is the value <span>between the tags</span>?";

const string openSpan = "<span>";
const string closeSpan = "</span>";

int openingPosition = message.IndexOf(openSpan);
int closingPosition = message.IndexOf(closeSpan);


openingPosition += openSpan.Length;
int length = closingPosition - openingPosition;
Console.WriteLine(message.Substring(openingPosition, length));*/

/*string message = "(What if) I am (only interested) in the last (set of parentheses)?";
int openingPosition = message.LastIndexOf('(');

openingPosition += 1;
int closingPosition = message.LastIndexOf(')');
int length = closingPosition - openingPosition;
Console.WriteLine(message.Substring(openingPosition, length));*/

/*string message = "(What if) there are (more than) one (set of parentheses)?";
while (true)
{
    int openingPosition = message.IndexOf('(');
    if(openingPosition == -1) break;

    openingPosition += 1;
    int closingPosition = message.IndexOf(')');
    int length = closingPosition - openingPosition;
    Console.WriteLine(message.Substring(openingPosition, length));

    // Note how we use the overload of Substring to return only the remaining
    // unprocessed message:
    message = message.Substring(closingPosition + 1);
}*/

string message = "(What if) I have [different symbols] but every {open symbol} needs a [matching closing symbol]?";

// The IndexOfAny() helper method requires a char array of characters
// we want to look for:

char[] openSymbols = { '[', '{', '(' };

/* We'll use a slightly different technique for iterating through the
characters in the string. This time, we'll use the closing position
of the previous iteration as the starting index for the next open
symbol. So, we need to initialize the closingPosition variable
to zero:*/

int closingPosition = 0;
while (true)
{
    int openingPosition = message.IndexOfAny(openSymbols, closingPosition);

    if (openingPosition == -1) break;

    string currentSymbol = message.Substring(openingPosition, 1);

    // Now we must find the matching closing symbol

    char matchingSymbol = ' ';

    switch (currentSymbol)
    {
        case "[":
            matchingSymbol = ']';
            break;
        case "{":
            matchingSymbol = '}';
            break;
        case "(":
            matchingSymbol = ')';
            break;
    }

    // Finally, use the techniques we've already learned to display the sub-string:

    openingPosition += 1;
    closingPosition = message.IndexOf(matchingSymbol, openingPosition);

    int length = closingPosition - openingPosition;
    Console.WriteLine(message.Substring(openingPosition, length));
}



///////////////////////////////////
// Remove and Replace

string data = "12345John Smith          5000  3  ";
string updatedData = data.Remove(5, 20);
Console.WriteLine(updatedData);

string message = "This--is--ex-amp-le--da-ta";
message = message.Replace("--", " ");
message = message.Replace("-","");
Console.WriteLine(message);

/////////////////////
// manipulação de strings


const string input = "<div><h2>Widgets &trade;</h2><span>5000</span></div>";

string quantity = "";
string output = "";

// Your work here

const string openSpan = "<span>";
const string closeSpan = "</span>";

int openingPosition = input.IndexOf(openSpan);
int closePosition = input.IndexOf(closeSpan);
openingPosition += 6;
int length = closePosition - openingPosition;
quantity = "Quantity: ";
quantity += input.Substring(openingPosition, length);

const string openDiv = "<div>";
const string closeDiv = "</div>";

openingPosition = input.IndexOf(openDiv);
closePosition = input.IndexOf(closeDiv);
openingPosition += 5;
// openingPosition += openDiv.Length;
length = closePosition - openingPosition;
output = "Output: ";
output += input.Substring(openingPosition, length);
output = output.Replace("&trade","&reg");


Console.WriteLine(quantity);
Console.WriteLine(output);


////////////////////////////

